{"0": {
    "doc": "Announcements",
    "title": "Announcements",
    "content": "Announcements are stored in the _announcements directory and rendered according to the layout file, _layouts/announcement.html. ",
    "url": "/announcements/",
    "relUrl": "/announcements/"
  },"1": {
    "doc": "Announcements",
    "title": "Week 1 Announcement",
    "content": "Apr 8 &middot; 0 min read . | Create a new repository based on Just the Class. | Configure a publishing source for GitHub Pages. Your course website is now live! | Update _config.yml with your course information. | Edit and create .md Markdown files to add your content. | . ",
    "url": "/announcements/",
    "relUrl": "/announcements/"
  },"2": {
    "doc": "Announcements",
    "title": "Welcome to CS6.401 SE",
    "content": "Apr 1 &middot; 0 min read Hello world! . ",
    "url": "/announcements/",
    "relUrl": "/announcements/"
  },"3": {
    "doc": "Calendar",
    "title": "Calendar",
    "content": " ",
    "url": "/calendar/",
    "relUrl": "/calendar/"
  },"4": {
    "doc": "Calendar",
    "title": "Course Overview",
    "content": "Jan 5 Course Overview Slides ",
    "url": "/calendar/#course-overview",
    "relUrl": "/calendar/#course-overview"
  },"5": {
    "doc": "Calendar",
    "title": "Introduction to Software Modeling",
    "content": " ",
    "url": "/calendar/#introduction-to-software-modeling",
    "relUrl": "/calendar/#introduction-to-software-modeling"
  },"6": {
    "doc": "Course Policy",
    "title": "Course Policy",
    "content": "The detailed policy of the course along with the mark distribution is listed here . ",
    "url": "/course_policy/",
    "relUrl": "/course_policy/"
  },"7": {
    "doc": "Course Policy",
    "title": "Teaching and Learning Methodology",
    "content": "This course is designed in such a manner to help learners get the essence of principles behind good software deign. To this end, the course will follow a problem based learning methodology. Learners will be taught concepts by making them work on real-life problems. This will promote deeper engagement, deeper understanding and resembles the true career situation. ",
    "url": "/course_policy/#teaching-and-learning-methodology",
    "relUrl": "/course_policy/#teaching-and-learning-methodology"
  },"8": {
    "doc": "Course Policy",
    "title": "Zero Tolerance on Plagiarism",
    "content": "This course requires student to submit assignments, participate in in-class activities, give mid and final exams, work with groups on projects and so on. Any forms of cheating or plagiarism will result in a score of “0” for projects, assignments or exams. Egregious cases will result in a grade of “F” for the course. ",
    "url": "/course_policy/#zero-tolerance-on-plagiarism",
    "relUrl": "/course_policy/#zero-tolerance-on-plagiarism"
  },"9": {
    "doc": "Course Policy",
    "title": "Extra Days and Soft Deadlines",
    "content": ". | Each student will have 5 extra days (in total) which they can use at their discretion throughout the course. Extra days will allow the student to submit assignments post the deadline without incurring any penalty. | Every project will have a soft deadline followed by a hard deadline after 7 days. If the student submits an assignment/project after the soft deadline, he/she will be penalized for every additional day until the hard deadline (if they have exhausted their extra days quota). For example, lets assume that the soft deadline is Feb 3 2023. This implies that the hard deadline will be Feb 10, 2023. The student in this case will be allowed to submit until Feb 10 2023. Assuming that the student has his/her full quota of extra days, they can delay submissions until Feb 8 2023 after which the submission will be penalized for each additional day. | No submissions will be entertained post the hard deadline. | . ",
    "url": "/course_policy/#extra-days-and-soft-deadlines",
    "relUrl": "/course_policy/#extra-days-and-soft-deadlines"
  },"10": {
    "doc": "Course Policy",
    "title": "Grading policy",
    "content": ". | The students can request a re-evaluation of the grade until a week after the particular grade has been posted. After that the student may not discuss prior grades with the instructor. | There will be no make up quiz/activity/exam under any circumstances unless a prior permission is granted. | In case if a student is not able to submit an assignment/project on time, he/she can make use of extra days and soft deadline facility as explained above. No submissions will be entertained post the hard deadline. No e-mails from students regarding assignments extensions will be entertained. | Although project grades are assigned for the entire team, each individual may be given a higher or lower grade (up to 50%) based on his/her contribution. Individual contribution for each project/assignment will be measured through multiple mechanisms. | . ",
    "url": "/course_policy/#grading-policy",
    "relUrl": "/course_policy/#grading-policy"
  },"11": {
    "doc": "Course Policy",
    "title": "Grade distribution",
    "content": "| Component | Weightage | . | Final Exam | 20% | . | Mid-term Quiz | 10% | . | Unit Assignments | 15% | . | 3 Unit Projects (3*15) | 45% | . | Other In-class activities | 10% | . Note: The course instructor deserves the right to make minor modifications to the above distribution based on the progress of the courses . ",
    "url": "/course_policy/#grade-distribution",
    "relUrl": "/course_policy/#grade-distribution"
  },"12": {
    "doc": "Home",
    "title": "Home",
    "content": " ",
    "url": "/home/",
    "relUrl": "/home/"
  },"13": {
    "doc": "Home",
    "title": "Table of contents",
    "content": ". | About | Lecture hours | Office Hours | Resources . | Useful textbooks: | Useful tools: | . | Assignments and Projects | . ",
    "url": "/home/#table-of-contents",
    "relUrl": "/home/#table-of-contents"
  },"14": {
    "doc": "Home",
    "title": "About",
    "content": "This course will provide an overview of the principles and foundations of modern software engineering techniques (primarily design based). Topics include software subsystem modelling, refactoring, design patterns and software architecture with a focus on application of these concepts to concrete software problems. ",
    "url": "/home/#about",
    "relUrl": "/home/#about"
  },"15": {
    "doc": "Home",
    "title": "Lecture hours",
    "content": "The lectures will be in-person and will held on every Monday and Thursday 2:00 PM to 3:30 PM in Room no: SH2 (Vindhya). The lecture materials (slides, lecture notes if any and links to supporting resources) can be accessed here. ",
    "url": "/home/#lecture-hours",
    "relUrl": "/home/#lecture-hours"
  },"16": {
    "doc": "Home",
    "title": "Office Hours",
    "content": "Every Friday 11:00 AM to 12:00 PM. Apart from this if more meetings or help is required, feel free to drop in an email to one of the teaching assistants . ",
    "url": "/home/#office-hours",
    "relUrl": "/home/#office-hours"
  },"17": {
    "doc": "Home",
    "title": "Resources",
    "content": "Useful textbooks: . | UML@classroom: An Introduction to Object-Oriented Modeling by Martina Seidl, Marion Scholz, Christian Huemer and Gerti Kappel | M. Fowler. Refactoring: Improving the design of existing Code, 2000. Addison Wesley. ISBN 0-201-48567-2. | Design Patterns Elements of Reusable Object Oriented Software by Enrich Gamma, Richard Helm, Ralph Johnson and John Vlissides | Software Architecture in Practice (Third/Fourth edition) by Len Bass, Paul Clements and Rick Kazman, Addison-Wesley. | . Useful tools: . | UML - There are plenty of UML tools available such as StarUML, MagicDraw, etc. As far as this course is concerned it would be more than enough to use an open source UML tools such as: Eclipse Papyrus UML or Gaphor. If you prefer text based modelling then PlantUML can be an excellent choice. Please don’t make use of any normal diagramming tools for this course. | Java IDE - This course will involve development in Java. There are many IDEs for Java available. We suggest to either use Eclipse or Intellij IDEA Community edition. | . ",
    "url": "/home/#resources",
    "relUrl": "/home/#resources"
  },"18": {
    "doc": "Home",
    "title": "Assignments and Projects",
    "content": "All the assignments, their grading policy will be posted here. ",
    "url": "/home/#assignments-and-projects",
    "relUrl": "/home/#assignments-and-projects"
  },"19": {
    "doc": "CS6.401 Software Engineering",
    "title": "Software Engineering",
    "content": "Welcome to the course website of CS6.401 Software Engineering. The details of syllabus, course plan, examinations can be found in the home page. Further details regarding the course can be found below: . | a course calendar with materials, | a staff page, | and a weekly schedule. | List of lectures with additional content | . ",
    "url": "/index.html#software-engineering",
    "relUrl": "/index.html#software-engineering"
  },"20": {
    "doc": "CS6.401 Software Engineering",
    "title": "CS6.401 Software Engineering",
    "content": " ",
    "url": "/index.html",
    "relUrl": "/index.html"
  },"21": {
    "doc": "Lectures",
    "title": "Lectures",
    "content": " ",
    "url": "/lectures/",
    "relUrl": "/lectures/"
  },"22": {
    "doc": "Project 1",
    "title": "Overview",
    "content": "Welcome to the first project of the CS6.401. Software Engineering course. Your objective in this project is to apply the concepts you have learned (and will learn) in the class to improve an existing software system. You will reverse engineering the design of the system and refactor it following grounded software engineering principles. You will use some tools to analyze the code and collect metrics to aid this process. Music, a web-based music server will serve as the testing ground for the project. The app can be used to organize your music collection and download music from different sources (well, that’s what it can do for now). You can find the original repository at https://github.com/sismics/music. We will use a class-specific fork which has been slightly streamlined for ease of use. The project also contains a bonus component, which although optional is encouraged to be attempted, as these marks can help you make up for marks lost in other components. ",
    "url": "/projects/project-1#overview",
    "relUrl": "/projects/project-1#overview"
  },"23": {
    "doc": "Project 1",
    "title": "GitHub Classroom",
    "content": "You have already completed the first step of the project. At this point all of you should be part of a team. If not, quickly follow the instructions in moodle section to join your team. Your team will be assigned a private repository on GitHub. This is where you will be working on the project. ",
    "url": "/projects/project-1#github-classroom",
    "relUrl": "/projects/project-1#github-classroom"
  },"24": {
    "doc": "Project 1",
    "title": "Specification",
    "content": " ",
    "url": "/projects/project-1#specification",
    "relUrl": "/projects/project-1#specification"
  },"25": {
    "doc": "Project 1",
    "title": "1 Mining the repository",
    "content": "Music is organized in several components, and to make meaningful improvements and contributions to it we need to become familiar with its structure and organization. The first task revolves around this. Consider the following features - . | User management - Several users can use the same Music server for managing their libraries. Music thus has a user management system, with users needing to login to add music to the library. In its current state, it is quite rudimentary. The users share the same library rather than having their specific libraries, and the only way to create new accounts is through the admin account. | Library Management - Wouldn’t be much of a music application without this. Users can add songs to Music with a two-step process. First, new music is imported in one of two ways - uploading local files, or downloading files from external sources. Once the file is imported, they can be added to the library after adding metadata information. Users can also edit existing songs. They can change the metadata information, add album cover art, or add the songs to new playlists. | Last.fm integration - Last.fm is an online service that, according to Wikipedia, “using a music recommender system called ‘Audioscrobbler’, builds a detailed profile of each user’s musical taste by recording details of the tracks the user listens to, either from Internet radio stations, or the user’s computer or many portable music devices”. Music allows users to link their Last.fm profile, and sync their listening history with it. | Administrator features - In addition to the above features that are available to all users, the administrator has further privileges. To be precise the features that we are concerned with are - they can create and delete user accounts and change the local directory to which the music is stored, or add new directories. | . Task 1- Identify the classes responsible for these features, and document their functionality and behavior. Use UML class diagrams (you may need multiple) along with OOP concepts such as inheritance, association, aggregation etc. with an appropriate level of abstraction to paint a clear and concise picture of the system. Present observations and comments such as points of strengths and weaknesses of the system as part of this. You will be evaluated on the completeness and correctness of your documentation . ",
    "url": "/projects/project-1#1-mining-the-repository",
    "relUrl": "/projects/project-1#1-mining-the-repository"
  },"26": {
    "doc": "Project 1",
    "title": "1E Bonus - Transition System",
    "content": "This is a bonus question. Marks you obtain here can make up for marks you lose in other components in the course. Task 1E - Using the Transition Systems approach for modeling behavior, document the behavior of the four features (think of them as subsystems) by modeling each of them as a transition system. Given that these subsystems interact with each other to provide the intended functionality, also describe the connections amongst various U (actions) and Y (observables), in equation form as well as in diagram form. ",
    "url": "/projects/project-1#1e-bonus---transition-system",
    "relUrl": "/projects/project-1#1e-bonus---transition-system"
  },"27": {
    "doc": "Project 1",
    "title": "2 Analysis",
    "content": "We now know how Music works. The next task is to know how well it works. For this, we will use automatic code evaluation tools to help with this. 2a Design Smells . Design smells are structures and patterns in code that while not incorrect, are indicative of violating fundamental design principles. These can hinder development by leading to recurring problems down the line and should be avoided. Many automated tools exist to determine these. We will use Sonarqube for this project. The project repository contains instructions for running it on the project. Sonarqube identifies code smells in a given repository. Code smells are closely related to design smells, but are more specific in nature. Make sure that you list design smells, not code smells. Note that Sonarqube is not perfect, use your own judgement wherever necessary . Task 2a - Identify 5-8 design smells in the project. Use the code smells identified by Sonarqube to support your analysis. PS - Sonarqube and the project itself require different Java versions to run. Instructions for handling this are provided in the project README . 3.2b Code Metrics . Code metrics are objective, repeatable, empirical measure of a project’s properties. Many tools exist for computing these for software repositories such as Checkstyle, PMD etc. We will use some of these tools to get some metrics for our project in its initial state. You are free to use any tools you find fit for this purpose. Task 2b - Report up to 6 code metrics for the project (and mention the tools used). What implications do you think these have? Do they guide your decision process for refactoring in any way? . ",
    "url": "/projects/project-1#2-analysis",
    "relUrl": "/projects/project-1#2-analysis"
  },"28": {
    "doc": "Project 1",
    "title": "3 Refactoring",
    "content": "We have now thoroughly understood the organization and performance of our system. It’s finally time to get our hands dirty. In the previous task you have identified various metrics and design smells for the repository which inform us of the code quality and how well it works. There’s plenty of room for improvement, right? As the final part of this phase, we will address this. 3a Design Smells . You identified 5-8 design smells previously. We now to want to address these by refactoring the code to improve its design. Note that we do not want to throw away the previous code or fundamentally change its functionality. Task 3a - Improve the code quality by refactoring it to remove the design smells identified. You don’t need to be exhaustive, but ensure that your refactoring is not trivial in nature. Remember that you should not change the program’s behavior. You will be evaluated on the correctness of your refactoring . 3b Code Metrics . Now that you’re done with refactoring, let’s see how the metrics have been impacted. Task 3b - Remeasure the metrics previously measured after refactoring. Have they improved or worsened? Is the trend consistent across all metrics? Does this match your expectations? Also attempt to analyze what contributed to this. ",
    "url": "/projects/project-1#3-refactoring",
    "relUrl": "/projects/project-1#3-refactoring"
  },"29": {
    "doc": "Project 1",
    "title": "Submission",
    "content": "The submission for this phase will be through GitHub classroom. The codebase will be automatically downloaded at the deadline, so ensure that everything is up in time. No exceptions will be granted. In addition to the code changes required for Task 3a, you also need to submit a report containing your responses for each task. The report should be present in the docs directory, titled phase1_&lt;team_number&gt;.pdf. In addition to the responses, accurately report the contribution of each team member at the end of the report. Soft deadline - 15th February, 2022 . Hard deadline - 22nd February, 2022 . Submissions made after the soft deadline will incur an additive 10% penalty for every day exceeded. No submissions will be accepted after the hard deadline. As explained in class, no extensions will be granted. You can use late days as per the course policy documented in the course website. ",
    "url": "/projects/project-1#submission",
    "relUrl": "/projects/project-1#submission"
  },"30": {
    "doc": "Project 1",
    "title": "Project 1",
    "content": " ",
    "url": "/projects/project-1",
    "relUrl": "/projects/project-1"
  },"31": {
    "doc": "Projects",
    "title": "Projects",
    "content": " ",
    "url": "/projects/",
    "relUrl": "/projects/"
  },"32": {
    "doc": "Schedule",
    "title": "Weekly Schedule",
    "content": ". | 9:00 AM | 9:30 AM | 10:00 AM | 10:30 AM | 11:00 AM | 11:30 AM | 12:00 PM | 12:30 PM | 1:00 PM | 1:30 PM | 2:00 PM | 2:30 PM | 3:00 PM | 3:30 PM | 4:00 PM | 4:30 PM | 5:00 PM | 5:30 PM | . | ",
    "url": "/schedule/#weekly-schedule",
    "relUrl": "/schedule/#weekly-schedule"
  },"33": {
    "doc": "Schedule",
    "title": "Monday",
    "content": ". | Lecture 2:00 PM–3:25 PM TBD | . | ",
    "url": "/schedule/",
    "relUrl": "/schedule/"
  },"34": {
    "doc": "Schedule",
    "title": "Tuesday",
    "content": "| ",
    "url": "/schedule/",
    "relUrl": "/schedule/"
  },"35": {
    "doc": "Schedule",
    "title": "Wednesday",
    "content": "| ",
    "url": "/schedule/",
    "relUrl": "/schedule/"
  },"36": {
    "doc": "Schedule",
    "title": "Thursday",
    "content": ". | Lecture 2:00 PM–3:25 PM TBD | . | ",
    "url": "/schedule/",
    "relUrl": "/schedule/"
  },"37": {
    "doc": "Schedule",
    "title": "Friday",
    "content": ". | Instructor Office Hours 11:00 AM–12:00 PM Office of Dr. Karthik, SERC, 5th Floor | . | . ",
    "url": "/schedule/",
    "relUrl": "/schedule/"
  },"38": {
    "doc": "Schedule",
    "title": "Schedule",
    "content": " ",
    "url": "/schedule/",
    "relUrl": "/schedule/"
  },"39": {
    "doc": "Staff",
    "title": "Instructor",
    "content": "Karthik Vaidhyanathan . karthik.vaidhyanathan@iiit.ac.in . Schedule an appointment . ",
    "url": "/staff/#instructor",
    "relUrl": "/staff/#instructor"
  },"40": {
    "doc": "Staff",
    "title": "Teaching Assistants",
    "content": "Aditya Hari Kancharla . aditya.hari@research.iiit.ac.in . I am associated with LTRC . Annapoorani A . annapoorani.a@students.iiit.ac.in . I am an M.Tech CS student . VJS Pranavasri . vjs.pranavasri@research.iiit.ac.in . I like building softwares . Shambhavi Ojha . shambhavi.ojha@students.iiit.ac.in . M.Tech Product, design and Management . Sidharth Giri . sidharth.giri@students.iiit.ac.in . Tweaking pipelines in Software Systems . Shlok Pandey . shlok.pandey@research.iiit.ac.in . Developing software is fun! . ",
    "url": "/staff/#teaching-assistants",
    "relUrl": "/staff/#teaching-assistants"
  },"41": {
    "doc": "Staff",
    "title": "Staff",
    "content": " ",
    "url": "/staff/",
    "relUrl": "/staff/"
  },"42": {
    "doc": "Week 1",
    "title": "Course Overview and Introduction to modeling",
    "content": "Course Overview Slides - Download . ",
    "url": "/lectures/week-1#course-overview-and-introduction-to-modeling",
    "relUrl": "/lectures/week-1#course-overview-and-introduction-to-modeling"
  },"43": {
    "doc": "Week 1",
    "title": "Additional Reading materials",
    "content": ". | About Boeing - https://spectrum.ieee.org/how-the-boeing-737-max-disaster-looks-to-a-software-developer . | On Software Licensing - https://cacm.acm.org/magazines/2014/7/176209-licensing-professional-software-engineers/abstract . | Article on Therac 25 - https://www.computer.org/csdl/magazine/co/2017/11/mco2017110008/13rRUxAStVR ) . | . ",
    "url": "/lectures/week-1#additional-reading-materials",
    "relUrl": "/lectures/week-1#additional-reading-materials"
  },"44": {
    "doc": "Week 1",
    "title": "Week 1",
    "content": " ",
    "url": "/lectures/week-1",
    "relUrl": "/lectures/week-1"
  },"45": {
    "doc": "Week 2",
    "title": "Introduction to Software Modeling and UML Overview",
    "content": "Download Lecture Slides . ",
    "url": "/lectures/week-2#introduction-to-software-modeling-and-uml-overview",
    "relUrl": "/lectures/week-2#introduction-to-software-modeling-and-uml-overview"
  },"46": {
    "doc": "Week 2",
    "title": "Additional Reading materials",
    "content": ". | Class Diagram and sequence diagram chapter from UML@classroom | Article on Benefits of Modeling by Jordi Cabot | Research article on Grand Challenges in Model-driven Engineering | . ",
    "url": "/lectures/week-2#additional-reading-materials",
    "relUrl": "/lectures/week-2#additional-reading-materials"
  },"47": {
    "doc": "Week 2",
    "title": "Additional resources",
    "content": ". | Plant UML Online editor | Plant UML base website | starUML | Book on Model-driven Software Engineering in Practice | . ",
    "url": "/lectures/week-2#additional-resources",
    "relUrl": "/lectures/week-2#additional-resources"
  },"48": {
    "doc": "Week 2",
    "title": "Week 2",
    "content": " ",
    "url": "/lectures/week-2",
    "relUrl": "/lectures/week-2"
  }
}
